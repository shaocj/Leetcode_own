Python：
1、
def searchRange(self, nums, target):
    def search(lo, hi):
        if nums[lo] == target == nums[hi]:
            return [lo, hi]
        if nums[lo] <= target <= nums[hi]:
            mid = (lo + hi) / 2
            l, r = search(lo, mid), search(mid+1, hi)
            return max(l, r) if -1 in l+r else [l[0], r[1]]
        return [-1, -1]
    return search(0, len(nums)-1)
   2、
   def searchRange(self, nums, target):
    lo = bisect.bisect_left(nums, target)
    return [lo, bisect.bisect(nums, target)-1] if target in nums[lo:lo+1] else [-1, -1]
C:
int* searchRange(int* nums, int numsSize, int target, int* returnSize) {
    int i, j, mid;
    int *ret = (int*)malloc(2*sizeof(int));
    *returnSize = 2;
    
    i = 0;
    j = numsSize-1;
    if(nums[i]>target || nums[j]<target){
        ret[0] = -1;
        ret[1] = -1;
        return ret;
    }
    
    for(; nums[i]<target && i<numsSize; i++)
        ;
    
    if(nums[i]==target){
        for(; nums[j]>target && j>=i; j--)
            ;
        ret[0] = i;
        ret[1] = j;
        return ret;
    }
    else{
        ret[0] = -1;
        ret[1] = -1;
        return ret;
    }
    
}
c++;
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, -1);
        int left = 0, right = nums.size() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) left = mid + 1;
            else right = mid;
        }
        if (nums[right] != target) return res;
        res[0] = right;
        right = nums.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) left = mid + 1;
            else right= mid;
        }
        res[1] = left - 1;
        return res;
    }
};
https://www.cnblogs.com/grandyang/p/4409379.html
