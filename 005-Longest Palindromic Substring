1、python
class Solution(object):
    def longestPalindrome(self, s):
        res = ""
        for i in range(len(s)):
            # odd case, like "aba"
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            # even case, like "abba"
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res
 
    # get the longest palindrome, l, r are the middle indexes   
    # from inner to outer
    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1; r += 1
        return s[l+1:r]
3、c
马拉车算法：https://www.cnblogs.com/grandyang/p/4475985.html；https://blog.csdn.net/u011469138/article/details/82431327
https://blog.csdn.net/Form_/article/details/79766986
char* longestPalindrome(char* s) {
    char p[210000];
    
    int l[210000];
    char t[210000];



        int len=strlen(s);
        p[0]='$',p[1]='#';
        int pos=2;
        for(int i=0;i<len;i++)
        {
            p[pos]=s[i];
            p[pos+1]='#';
            pos+=2;
        }
        p[pos]='\0';    

        int id=0,resLen=0,rescen=0,mx=0;

        for(int i=1;i<pos;i++)
        {

            //l[i]=mx>i?min(l[2*id-i],mx-i):1;  //整个算法的精髓所在
            if (mx>i)
            {
                if (l[2*id-i]>(mx-i))
                    l[i]=mx-i;
                else
                    l[i]=l[2*id-i];
            }
            else
                l[i]=1;
            while(p[l[i]+i]==p[i-l[i]]) ++l[i];
            if(mx-i<l[i])
            {
                mx=i+l[i];
                id=i;
            }
            if(l[i]>resLen)
            {
                resLen=l[i];
                rescen=i;
            }

        }
        for(int i=(rescen-resLen)/2;i<resLen-1;i++)  //输出整个最长回文串
        {
            int j=0;
            printf("%c",s[i]);
            t[j++]=s[i];
        }
      return t;
  
}
