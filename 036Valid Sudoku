1、
int isValidSudoku(char** board, int boardRowSize, int boardColSize) {
    int rows[9][9]={0}; //rows[5][0] means whether number 1('0'+1) in row 5 has appeared.
	int cols[9][9]={0}; //cols[3][8] means whether number 9('8'+1) in col 3 has appeared.
	int blocks[3][3][9]={0};//blocks[0][2][5] means whether number '6' in block 0,2 (row 0~2,col 6~8) has appeared.
	for(int r=0;r<9;r++)    //traverse board r,c
		for(int c=0;c<9;c++)
			if(board[r][c]!='.'){   //skip all number '.'
				int number=board[r][c]-'1'; //calculate the number's index(board's number minus 1)
				if(rows[r][number]++) return 0; //if the number has already appeared once, return false.
				if(cols[c][number]++) return 0;
				if(blocks[r/3][c/3][number]++) return 0;
			}
	return 1;
}
2、
bool isValidSudoku(vector<vector<char>>& board) {
    map<char,int> row[9],col[9],blk[9];
    char c;
    for(int i = 0;i<9;i++){
        for(int j =0;j<9;j++){
            c = board[i][j];
            if((c!='.')&&(0<row[i][c]++ || 0<col[j][c]++ || 0<blk[i/3*3+j/3][c]++)) return false;
        }
    }
    return true;
}




#include<stdio.h>
#include<stdlib.h>

int isValidSudoku(char** board, int boardRowSize, int boardColSize) {
    int rows[9][9]={0}; //rows[5][0] means whether number 1('0'+1) in row 5 has appeared.
	int cols[9][9]={0}; //cols[3][8] means whether number 9('8'+1) in col 3 has appeared.
	int blocks[3][3][9]={0};//blocks[0][2][5] means whether number '6' in block 0,2 (row 0~2,col 6~8) has appeared.
	for(int r=0;r<9;r++)    //traverse board r,c
		for(int c=0;c<9;c++)
			if(board[r][c]!='.'){   //skip all number '.'
				int number=board[r][c]-'1'; //calculate the number's index(board's number minus 1)
				if(rows[r][number]++) return 0; //if the number has already appeared once, return false.
				if(cols[c][number]++) return 0;
				if(blocks[r/3][c/3][number]++) return 0;
			}
	return 1;
}
int main()
{

注意：二维字符串数组初始化方法：
char a[2][2]={"1234d","edd"}等于a[2][2]={{'1','2','3','4','d'},{'e','d','d'}}
    char nums[9][9]={
  {'5','3','.','.','7','.','.','.','.'},
  {'6','.','.','1','9','5','.','.','.'},
  {'.','9','8','.','.','.','.','6','.'},
  {'8','.','.','.','6','.','.','.','3'},
  {'4','.','.','8','.','3','.','.','1'},
  {'7','.','.','.','2','.','.','.','6'},
  {'.','6','.','.','.','.','2','8','.'},
  {'.','.','.','4','1','9','.','.','5'},
  {'.','.','.','.','8','.','.','7','9'}
};

    char *p[9]={nums[0],nums[1],nums[2],nums[3],nums[4],nums[5],nums[6],nums[7],nums[8]};
    int a=isValidSudoku(p,9,9);
    printf("a=%d\n",a);
    return 0;
}

