c++:
https://www.cnblogs.com/grandyang/p/4481576.html
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        if (nums.empty() || nums.back() < 0 || nums.front() > 0) return {};
        for (int k = 0; k < nums.size(); ++k) {
            if (nums[k] > 0) break;
            if (k > 0 && nums[k] == nums[k - 1]) continue;
            int target = 0 - nums[k];
            int i = k + 1, j = nums.size() - 1;
            while (i < j) {
                if (nums[i] + nums[j] == target) {
                    res.push_back({nums[k], nums[i], nums[j]});
                    while (i < j && nums[i] == nums[i + 1]) ++i;
                    while (i < j && nums[j] == nums[j - 1]) --j;
                    ++i; --j;
                } else if (nums[i] + nums[j] < target) ++i;
                else --j;
            }
        }
        return res;
    }
};


C:
 void sort(int* nums, int begin, int end)
{
    int l=begin, r=end;
    int v = nums[l+(r-l)/2];
    while(l <= r)
    {
        while(nums[l] < v) l++;
        while(nums[r] > v) r--;
        if(l <= r)
        {
            int t = nums[l];
            nums[l] = nums[r];
            nums[r] = t;
            l++; r--;
        }
    }
    if(r > begin)
        sort(nums, begin, r);
    if(l < end)
        sort(nums, l, end);
}

//AC - 24ms;
int** threeSum(int* nums, int size, int* returnSize)
{
    sort(nums, 0, size-1);
    int left, right;
    int** arr = (int**)malloc(sizeof(int*));
    *returnSize = 0;
    for(int i = 0; i < size-2; i++)
    {
        while(i<size-2 && i>0 && nums[i]==nums[i-1]) i++; //avoid redundant traversal by isolating the duplicates;
        left = i+1;
        right = size-1;
        int sum = -nums[i];
        while(left < right) //the searching process is the same with the 2-sum problem;
        {
            int t = nums[left]+nums[right];
            if(t > sum) right--;
            else if(t < sum) left++;
            else
            {
                if(!*returnSize || (*returnSize && (nums[i]!=arr[*returnSize-1][0] ||
                                nums[left]!=arr[*returnSize-1][1]))) //collect the qualified and isolating the duplicates;
                {
                    *returnSize += 1;
                    arr = (int**)realloc(arr, sizeof(int*)*(*returnSize));
                    arr[*returnSize-1] = (int*)malloc(sizeof(int)*3);
                    arr[*returnSize-1][0] = nums[i];
                    arr[*returnSize-1][1] = nums[left];
                    arr[*returnSize-1][2] = nums[right];
                }
                left++;
            }
        }
    }
    return arr;
}
python:
class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
       
        res = []
        nums.sort()
        for i in range(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l, r = i+1, len(nums)-1
            while l < r:
                s = nums[i] + nums[l] + nums[r]
                if s < 0:
                    l +=1 
                elif s > 0:
                    r -= 1
                else:
                    res.append((nums[i], nums[l], nums[r]))
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1; r -= 1
        return res
