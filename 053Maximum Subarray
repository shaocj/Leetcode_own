


 int maxSubArray(vector<int>& nums) 
    {
        int local=nums[0];//存储每一个阶段的最优解
        int global=nums[0];//存储整个过程能得到的最大sum
        for(int i=1;i<nums.size();i++)//从i=1开始
        {
            local=max(local+nums[i],nums[i]);//选择要“延续”还是“重新开始”
            global=max(global,local);
        }
        return global;
        
    }


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.empty()) return 0;
        return helper(nums, 0, (int)nums.size() - 1);
    }
    int helper(vector<int>& nums, int left, int right) {
        if (left >= right) return nums[left];
        int mid = left + (right - left) / 2;
        int lmax = helper(nums, left, mid - 1);
        int rmax = helper(nums, mid + 1, right);
        int mmax = nums[mid], t = mmax;
        for (int i = mid - 1; i >= left; --i) {
            t += nums[i];
            mmax = max(mmax, t);
        }
        t = mmax;
        for (int i = mid + 1; i <= right; ++i) {
            t += nums[i];
            mmax = max(mmax, t);
        }
        return max(mmax, max(lmax, rmax));
    }
};
