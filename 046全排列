前两种思路一样：
1、
    void dfs(vector<int> &nums, int pos, vector<int> &list, vector<vector<int>> &result, vector<int> &visited) {
        if(pos == nums.size()) {
            result.push_back(list);
            return;
        }
        for(int i = 0; i < nums.size(); i++) {
            if(!visited[i]) {  //当前的位置未访问
                list.push_back(nums[i]);
                visited[i] = 1;
                dfs(nums, pos + 1, list, result, visited);
                //回退
                visited[i] = 0;  
                list.pop_back(); 
            }
        }
    }
 
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> list;
        vector<int> visited(nums.size(), 0);  //是否已经访问过（注意：先初始化为0）
        dfs(nums, 0, list, result, visited);
        return result;

————————————————
版权声明：本文为CSDN博主「Fighting_初心」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_34519487/article/details/104456788


c++:
https://www.cnblogs.com/grandyang/p/4358848.html
2、
class Solution {
public:
    vector<vector<int>> permute(vector<int>& num) {
        vector<vector<int>> res;
        vector<int> out, visited(num.size(), 0);
        permuteDFS(num, 0, visited, out, res);
        return res;
    }
    void permuteDFS(vector<int>& num, int level, vector<int>& visited, vector<int>& out, vector<vector<int>>& res) {
        if (level == num.size()) {res.push_back(out); return;}
        for (int i = 0; i < num.size(); ++i) {
            if (visited[i] == 1) continue;
            visited[i] = 1;
            out.push_back(num[i]);
            permuteDFS(num, level + 1, visited, out, res);
            out.pop_back();
            visited[i] = 0;
        }
    }
};

3、
#include <iostream>
#include <vector>
#include<algorithm>
using namespace std;

void conv(vector<int>& nums,vector<vector<int> >& bak,int start){
   if(nums.size() == start){
       bak.push_back(nums);
       return;
   }
   for(int i = start; i < nums.size(); i++){
       swap(nums[start],nums[i]);
       conv(nums,bak,start + 1);
       swap(nums[start],nums[i]);
   }
}
vector<vector<int> > permute(vector<int>& nums)  {
   vector<vector<int> > bak;
   int n = nums.size() ;
   if(n == 0) {
       bak.push_back(nums);
       return bak;
   }
   //sort(nums.begin(),nums.end());
   conv(nums,bak,0);
   return bak;
}

void printInt(int v)
{
    cout<<v<<'\t';
}
void printNesting(vector<int> v)
{
    //这些都是前面现成的
    vector<int>::iterator begin = v.begin();
    vector<int>::iterator end = v.end();
    for_each(begin,end,printInt);
    cout<<endl;
}


int main()
{
    int a[5] = {1,2,3};
    vector<int> b(a, a+3);
    vector<vector<int> > nums;
    nums = permute(b);
    vector<vector<int> >::iterator begin = nums.begin();
    vector<vector<int> >::iterator end = nums.end();
    for_each(begin,end,printNesting);
    return 0;
}

java:
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(res, nums, 0);
        return res;
    }

    public void dfs(List<List<Integer>> res, int[] nums, int cur) {
        if (cur == nums.length) {
            List<Integer> temp = new ArrayList<>();
            for (Integer item : nums)
                temp.add(item);
            res.add(temp);
        } else for (int i = cur; i < nums.length; i++) {
            swap(nums, cur, i);
            dfs(res, nums, cur + 1);
            swap(nums, cur, i);  //这里一定要交换回来，因为不是和C++一样是数组的拷贝，Java中是数组的引用，不能改变，不然得不到正确的结果
        }
    }

    public void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}
