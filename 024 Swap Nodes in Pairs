C++:
https://www.cnblogs.com/grandyang/p/4441680.html
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (!head || !head->next) return head;
        ListNode *t = head->next;
        head->next = swapPairs(head->next->next);
        t->next = head;
        return t;
    }
};


C:
1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* swapPairs(struct ListNode* head){
    if(head == NULL||head->next==NULL) return head;
    struct ListNode* tmp = head->next;
    head->next=swapPairs(tmp->next);
    tmp->next=head;
    return tmp;
}
3、
struct ListNode* swapPairs(struct ListNode* head) {
   struct ListNode* current,*pre,*scount;
    pre=NULL;
    scount=current=head;
    int count=0;
    while(scount)
    {
        count++;
        if(count == 2)
        {
            scount=scount->next;
            struct ListNode *flow,*first;
            first=current;
            while(count-- >1)
            {
                flow=current->next;
                current->next=flow->next;
                flow->next=first;
                first=flow;
            }
            if(pre)
                pre->next = first;
            else
                head=first;
            pre=current;
            current=current->next;
            count=0;
        }
        else
            scount=scount->next;
    }
    return head;
}
