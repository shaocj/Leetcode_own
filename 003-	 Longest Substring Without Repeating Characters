c++:
1、class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res = 0, left = -1, n = s.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            if (m.count(s[i]) && m[s[i]] > left) {
                left = m[s[i]];  
            }
            m[s[i]] = i;
            res = max(res, i - left);            
        }
        return res;
    }
};
2、class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> m(128, -1);
        int res = 0, left = -1;
        for (int i = 0; i < s.size(); ++i) {
            left = max(left, m[s[i]]);
            m[s[i]] = i;
            res = max(res, i - left);
        }
        return res;
    }
};





1、C 
int lengthOfLongestSubstring(char* s) {
    int letters[128]={0},max=0;
    char* head=s,*tail=s;
    while (*tail) {
        if (letters[*tail]) {
            max = (tail-head>max) ? tail-head : max;
            while (*head!=*tail) 
                letters[*head++]=0;
            head++;
            tail++;
        } 
        else 
            letters[*tail++]=1;
    }
     max=(max>tail-head) ? max : tail-head;
    return max;
}
2、python
class Solution:
    # @return an integer
    def lengthOfLongestSubstring(self, s):
        start = maxLength = 0
        usedChar = {}
        
        for i in range(len(s)):
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)

            usedChar[s[i]] = i

        return maxLength
