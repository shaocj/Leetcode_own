C:
1、递归
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    if (l1 == NULL) {
        return l2;
    }else if (l2 == NULL){
        return l1;
    }else if (l1->val < l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

struct ListNode *mergeKLists(struct ListNode **lists, int listsSize) {
    if (listsSize == 0)  {
        return NULL;
    }
    if (listsSize == 1)   {
        return lists[0];
    }
    for (int i = 0,j = listsSize - 1; i < j; i++, j--) {
        lists[i] = mergeTwoLists(lists[i], lists[j]);
        listsSize--;
    }
    return mergeKLists(lists, listsSize);
}

2、迭代
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    int i, j, flag, minVal, findLoc;
    struct ListNode **pi, *out, *pOut;
    

    
    /* the case when all lists are empty */
    for (i = 0; i < listsSize; i++) {
        if (lists[i] != NULL) break;
    }
    if (i == listsSize) { 
        out = NULL;
        return out;
    }
       
    out = (struct ListNode*) malloc (sizeof(struct ListNode));
    pOut = out;

    for (i = 0; ; i++){
        minVal = INT_MAX;
        flag = 0;
        for (j = 0; j < listsSize; j++){
            if (lists[j] != NULL && lists[j]->val <= minVal){ /* find min in all [next int in list] */
                findLoc = j;
                minVal = lists[j]->val;
                flag = 1;
            }
        }
        if (flag == 0){ /* all lists ends */
            pOut->next = NULL;
            return out;
        }
        else{ /* add to *out */
            if (i != 0) {
                pOut->next = (struct ListNode*) malloc (sizeof(struct ListNode));
                pOut = pOut->next;
            }          
            pOut->val = lists[findLoc]->val;
            lists[findLoc] = lists[findLoc]->next;
        }
    }
    return out;
}

Python:
调试：
class Node(object):
	#"数据域"
	def __init__(self, data, next = 0):
		self.data = data
		self.next = next
class LinkList(object):
	#"处理类"
	def __init__(self):
		#"head用来指向Node类变量, length用来计算单链表的长度(每插入一个元素，长度加1，如果删除的时候，长度减1)"
		self.head = 0
		self.length = 0
 
	def InitList(self, data):
		#"单链表的初始化"
		self.head = Node(data[0])
		p = self.head
		self.length += 1
 
		for x in data[1:]:
			node = Node(x)
			# 注意下面两句话的顺序，不要弄颠倒，首先要让p指向node，然后再把它重新赋值给p，这样才完成了对p的更新
			p.next = node
			p = p.next
			self.length += 1
L = LinkList()
lists = [L.InitList([1,4,5]),L.InitList([1,3,4]),L.InitList([2,6])]
lists


from operator import attrgetter

class Solution:
    # @param a list of ListNode
    # @return a ListNode
    def mergeKLists(self, lists):
        sorted_list = []
        for head in lists:
            curr = head
            while curr is not None:
                sorted_list.append(curr)
                curr = curr.next

        sorted_list = sorted(sorted_list, key=attrgetter('val'))
        for i, node in enumerate(sorted_list):
            try:
                node.next = sorted_list[i + 1]
            except:
                node.next = None

        if sorted_list:
            return sorted_list[0]
        else:
            return None
