C:
char* longestCommonPrefix(char** strs, int strsSize) {
if (strs == NULL || *strs == NULL)
    return "";
    
int len = strlen(strs[0]);
int max = 0, loop = 1, i;
char* ps = strs[0], *ret;

while(max < len) {
    for (i = 1; i < strsSize; i++) {
        if (strs[i][max] != strs[0][max]) {
            len = max;
            break;
        }
    }
    if (max < len) max++;
}

ret = (char*)malloc(sizeof(char)*(max+1));
for (i = 0; i < max; i++) ret[i] = strs[0][i];

ret[max] = '\0';

return ret;
}

/***********************************************************************/
#include <stdio.h>
#include <stdlib.h>
char* longestCommonPrefix(char** strs, int strsSize) {
    if (strs == NULL || *strs == NULL)
        return "";

    int len = strlen(strs[0]);
    int max = 0,i;
    char* ps = strs[0], *ret;
    while(max < len) {
        for (i = 1; i < strsSize; i++) {
            if (*(*(strs+i)+max) != *(*(strs+0)+max)) {
                len = max;
                break;
            }
        }
        if (max < len) max++;
    }

    ret = (char*)malloc(sizeof(char)*(max+1));
    for (i = 0; i < max; i++) ret[i] = strs[0][i];

    ret[max] = '\0';

    return ret;
}
int main()
{
/*
    //ÐÐÖ¸Õë
    char a[3][7] = {"flower","flow","flowe"};
    char(*p)[6];
    p=a;//p=&a[0];
*/

    //ÁÐÖ¸Õë
    char a[3][7]={"flower","flow","flowe"};
    char *b[3]={a[0],a[1],a[2]};
    char *p;
    p=&a[0][0];//p=a[0]

    char *t;
    t = longestCommonPrefix(b,3);
    printf("ret = %s\n",t);
    return 0;
}
******************************************************************************************/
Ptyhon:
class Solution:
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        if not strs:
            return ""
            
        for i, letter_group in enumerate(zip(*strs)):
            if len(set(letter_group)) > 1:
                return strs[0][:i]
        else:
            return min(strs)
注：for i, letter_group in enumerate(zip(*str)):
    print(i,letter_group)
    print(set(letter_group))
    if len(set(letter_group)) > 1:
        print(str[0][:i])
else:
    print(min(str))
 输出：0 ('f', 'f', 'f')
    {'f'}
    1 ('l', 'l', 'l')
    {'l'}
    2 ('o', 'o', 'i')
    {'o', 'i'}
    fl
    3 ('w', 'w', 'g')
    {'g', 'w'}
    flo
    flight
