c++：
1、
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> out;
        combinationSumDFS(candidates, target, 0, out, res);
        return res;
    }
    void combinationSumDFS(vector<int>& candidates, int target, int start, vector<int>& out, vector<vector<int>>& res) {
        if (target < 0) return;
        if (target == 0) {res.push_back(out); return;}
        for (int i = start; i < candidates.size(); ++i) {
            out.push_back(candidates[i]);
            combinationSumDFS(candidates, target - candidates[i], i, out, res);
            out.pop_back();
        }
    }
};

https://www.cnblogs.com/huntfor/p/3849611.html
打印：：

i=0 start=0 target=7=>[ 2]
i=0 start=0 target=5=>[ 2 2]
i=0 start=0 target=3=>[ 2 2 2]
i=0 start=0 target=1=>[ 2 2 2 2]
i=1 start=0 target=1=>[ 2 2 2 3]
i=2 start=0 target=1=>[ 2 2 2 6]
i=1 start=0 target=3=>[ 2 2 3]
i=2 start=0 target=3=>[ 2 2 6]
i=1 start=0 target=5=>[ 2 3]
i=1 start=1 target=2=>[ 2 3 3]
i=2 start=1 target=2=>[ 2 3 6]
i=2 start=0 target=5=>[ 2 6]
i=1 start=0 target=7=>[ 3]
i=1 start=1 target=4=>[ 3 3]
i=1 start=1 target=1=>[ 3 3 3]
i=2 start=1 target=1=>[ 3 3 6]
i=2 start=1 target=4=>[ 3 6]
i=2 start=0 target=7=>[ 6]
i=2 start=2 target=1=>[ 6 6]

 2 2 3


#include <iostream>

using namespace std;
#include <iostream>
#include <vector>
#include<algorithm>
using namespace std;
void print(int v)
{
    cout<<" "<<v;
}
void combinationSumDFS(vector<int>& candidates, int target, int start, vector<int>& out, vector<vector<int> >& res) {
    //{2,3,6,7}
    if (target < 0) return;
    if (target == 0)
    {
        res.push_back(out);
        cout<<"输出"<<endl;
        return;
    }
    for (int i = start; i < candidates.size(); ++i) {
        cout<<"i="<<i<<" start="<<start<<" target="<<target<<"=>";

        out.push_back(candidates[i]);
         vector<int>::iterator begin=out.begin();
        vector<int>::iterator end=out.end();
        cout<<"[";
        for_each(begin,end,print);
        cout<<"]";
        cout<<endl;
        combinationSumDFS(candidates, target - candidates[i], i, out, res);
        out.pop_back();
    }
}
vector<vector<int> > combinationSum(vector<int>& candidates, int target) {
    vector<vector<int> > res;
    vector<int> out;
    combinationSumDFS(candidates, target, 0, out, res);
    return res;
}

void printNesting(vector<int> v)
{
    //这些都是前面现成的
    vector<int>::iterator begin = v.begin();
    vector<int>::iterator end = v.end();
    for_each(begin,end,print);
    cout<<endl;
}
int main()
{
    int a[5] = {2,3,6,7};
    vector<int> b(a, a+3);
    vector<vector<int> > nums;
    nums = combinationSum(b,7);
    cout<<endl;
    vector<vector<int> >::iterator begin = nums.begin();
    vector<vector<int> >::iterator end = nums.end();
    for_each(begin,end,printNesting);
    return 0;
}



