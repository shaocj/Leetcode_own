c:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
    if(head -> next == NULL) return NULL;
    struct ListNode * slow = head;
    struct ListNode * fast = head;
    while (n > 0) 
    {
        n--;
        slow = slow->next;
    }
    if (NULL == slow) return head->next;    
    while (NULL != (slow = slow->next)) fast = fast->next;
    fast->next = fast->next->next;
    return head;
}
python:

class Solution:
    def removeNthFromEnd(self, head, n):
        fast = slow = head
        for _ in range(n):
            fast = fast.next
        if not fast:
            return head.next
        while fast.next:
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return head
