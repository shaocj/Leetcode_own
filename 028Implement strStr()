1„ÄÅKMP
void getnext(char* needle,int nLength,int* next)
{
    next[0]=-1;
    int k=-1;
    int j=0;
    while(j<nLength-1)
    {
        if(k=-1||needle[k]==needle[j])
        {
            k++;
            j++;
            if(needle[k] == needle[j])
                next[j]=next[k];
            else
                next[j]=k;
        }
        else
            k=next[k];
    }
}

int strStr(char* haystack, const char* needle) {
    int i=0;
    int j=0;
    int a;
    int next[100];
    int hLength=0,nLength=0;


    hLength=strlen(haystack);
    nLength=strlen(needle);



    getnext(needle,nLength,next);
    while(i < hLength && j < nLength)
    {
        if(j==-1||haystack[i]==needle[j])
        {
            i++;
            j++;
        }
        else
            j=next[j];
    }
    if(j>nLength-1)
        return i-nLength;
}
2\
class Solution {
public:
    int strStr(string haystack, string needle) {
        if (needle.empty()) return 0;
        int m = haystack.size(), n = needle.size();
        if (m < n) return -1;
        for (int i = 0; i <= m - n; ++i) {
            int j = 0;
            for (j = 0; j < n; ++j) {
                if (haystack[i + j] != needle[j]) break;
            }
            if (j == n) return i;
        }
        return -1;
    }
};
