1、C
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
      if(l1 == NULL && l2 == NULL)
    {
        return NULL;
    }
    if(l1 == NULL)
    {
        return l2;
    }
    
    if(l2 == NULL)
    {
        return l1;
    }
    
    struct ListNode* p1 = l1;
		struct ListNode* p2 = l2;
		struct ListNode* ans = (struct ListNode*)malloc(sizeof(struct ListNode));
		ans->val = 0;
		int c = 0;
        struct ListNode* p = ans;
		while (p1 != NULL || p2 != NULL || c != 0) {
           
			p->next = (struct ListNode*)malloc(sizeof(struct ListNode));
			//p->next->val = 0;
			p = p->next;
		
           // int a = p1->val;
           // int b = p2->val;
			//int a = p1 != 0 ? p1->val : 0;
			//int b = p2 != 0 ? p2->val : 0;
            int a = p1->val;
            int b = p2->val;
			int s = (a + b + c) % 10;
			c = (a + b + c) / 10;
			p->val = s;
            //p->next = NULL;
            //p1 = p1->next;
            //p2 = p2->next;
			p1 = p1 == NULL ? NULL : p1->next;
			p2 = p2 == NULL ? NULL : p2->next;
		}
		return ans->next;
}
2、python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
# @return a ListNode
    def addTwoNumbers(self, l1, l2):
        c = 0
        head = l = ListNode(0)
        while l1 or l2 or c:
            v1 = v2 = 0
            if l1:
                v1 = l1.val
                l1 = l1.next
            if l2:
                v2 = l2.val
                l2 = l2.next
            c, val = divmod(v1+v2+c, 10)
            l.next = ListNode(val)
            l = l.next
        return head.next
