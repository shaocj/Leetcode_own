
1、C
int* twoSum(int* nums, int numsSize, int target) {
    
    int i, max, min;
    max = min = nums[0];
    for(i = 0; i < numsSize; i++) {
        if(nums[i] > max) max = nums[i];
        if(nums[i] < min) min = nums[i];
    }
    
    int *first   = (int*)calloc((max-min+1), sizeof(int));
    int *final = (int*)malloc(sizeof(int)*2);
    
    for(i = 0; i < numsSize; first[nums[i]-min] = ++i) {
        int lookfornum = target - nums[i];
        if(lookfornum < min || lookfornum > max) continue;
        int differ = lookfornum - min;
        if (first[differ]) {         
            final[0] =  first[differ] -1;;
            final[1] = i;
            break;
        }
    }
    
    return final;
}

2、
 void sort(int* nums, int begin, int end)
{
    int l=begin, r=end;
    int v = nums[l+(r-l)/2];
    while(l <= r)
    {
        while(nums[l] < v) l++;
        while(nums[r] > v) r--;
        if(l <= r)
        {
            int t = nums[l];
            nums[l] = nums[r];
            nums[r] = t;
            l++; r--;
        }
    }
    if(r > begin)
        sort(nums, begin, r);
    if(l < end)
        sort(nums, l, end);
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target) {
    sort(nums,0,numsSize-1);
    int i=0,j=numsSize-1;
     int* arr = (int*)malloc(sizeof(int)*2);
    while(i<j)
    {
       int t=nums[i]+nums[j];
        if (t > target) j--;
        else if(t < target) i++;
        else{
           
            arr[0] = i;
            arr[1] = j;
            i++;
        }
        
    }
    return arr;
}
3、c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            if (m.count(target - nums[i])) {
                return {i, m[target - nums[i]]};
            }
            m[nums[i]] = i;
        }
        return {};
    }
};
2、python
class Solution:
     def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        dict={}
        for i in range(len(nums)):
            a=nums[i]
            diff=target-a
            if diff in dict:
                return(dict[diff],i)
            dict[a]=i
            
