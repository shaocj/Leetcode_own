C++;
https://www.cnblogs.com/grandyang/p/4515925.html
class Solution {
public:
    vector<vector<int>> fourSum(vector<int> &nums, int target) {
        vector<vector<int>> res;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n - 3; ++i) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n - 2; ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int left = j + 1, right = n - 1;
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        vector<int> out{nums[i], nums[j], nums[left], nums[right]};
                        res.push_back(out);
                        while (left < right && nums[left] == nums[left + 1]) ++left;
                        while (left < right && nums[right] == nums[right - 1]) --right;
                        ++left; --right;
                    } else if (sum < target) ++left;
                    else --right;
                }
            }
        }
        return res;
    }
};


Cï¼›
void sort(int* nums, int begin, int end)
{
    int l = begin;
    int r = end;
    int v = nums[l+(r-l)/2];
    while(l <= r)
    {
        while(nums[l] < v) l++;
        while(nums[r] > v) r--;
        if(l <= r)
        {
            int t = nums[l];
            nums[l] = nums[r];
            nums[r] = t;
            l++; r--;
        }
    }
    if(begin < r)
        sort(nums, begin, r);
    if(l < end)
        sort(nums, l, end);
}

//AC - 8ms;
int** fourSum(int* nums, int size, int target, int* returnSize)
{
    sort(nums, 0, size-1);
    int** arr = (int**)malloc(sizeof(int*));
    *returnSize = 0;
    for(int i = 0; i < size-3; i++)
    {
        if(i && nums[i]==nums[i-1]) continue;
        int t0 = target-nums[i]; //target for 3Sum;
        for(int j = i+1; j < size-2; j++)
        {
            if(j!=i+1 && nums[j]==nums[j-1]) continue; //the start position should be handled carefully, it's i+1 while removing redundancy;
            int t1 = t0-nums[j]; //target for 2Sum;
            if(nums[j+1]+nums[j+2] > t1) break; //the possible least sum is even bigger than the target - just try the next first candidate - i+1;
            if(nums[size-1]+nums[size-2] < t1) continue; //the possible maximal sum is smaller than the target - just try the next second candidate to make it bigger - j+1;
            int l = j+1;
            int r = size-1;
            while(l < r) //2Sum problem;
            {
                int t2 = nums[l]+nums[r];
                if(t1 > t2) l++;
                else if(t1 < t2) r--;
                else
                {
                    if(!*returnSize || (*returnSize && (nums[i]!=arr[*returnSize-1][0]
                                    || nums[j]!=arr[*returnSize-1][1]
                                    || nums[l]!=arr[*returnSize-1][2]))) //avoid duplicates;
                    {
                        *returnSize += 1;
                        arr = (int**)realloc(arr, sizeof(int*)*(*returnSize));
                        arr[*returnSize-1] = (int*)malloc(sizeof(int)*4);
                        arr[*returnSize-1][0] = nums[i];
                        arr[*returnSize-1][1] = nums[j];
                        arr[*returnSize-1][2] = nums[l];
                        arr[*returnSize-1][3] = nums[r];
                    }
                    l++;
                }
            }
        }
    }
    return arr;
}
python :
class Solution:
    def fourSum(self, nums, target):
        nums.sort()
        print(nums)
        results = []
        self.findNsum(nums, target, 4, [], results)
        return results
    def findNsum(self, nums, target, N, result, results):
        if len(nums) < N or N < 2: return

        # solve 2-sum
        if N == 2:
            l,r = 0,len(nums)-1
            while l < r:
                if nums[l] + nums[r] == target:
                    results.append(result + [nums[l], nums[r]])
                    l += 1
                    r -= 1
                    while l < r and nums[l] == nums[l - 1]:
                        l += 1
                    while r > l and nums[r] == nums[r + 1]:
                        r -= 1
                elif nums[l] + nums[r] < target:
                    l += 1
                else:
                    r -= 1
        else:
            for i in range(0, len(nums)-N+1):   # careful about range
                if target < nums[i]*N or target > nums[-1]*N:  # take advantages of sorted list
                    break
                if i == 0 or i > 0 and nums[i-1] != nums[i]:  # recursively reduce N
                    self.findNsum(nums[i+1:], target-nums[i], N-1, result+[nums[i]], results)
        return 
