
dfs:

    void dfs(vector<int> &nums, int pos, vector<int> &list, vector<vector<int>> &result, vector<int> visited) {
        if(pos == nums.size()) {
            result.push_back(list);
            return;
        }
        if(pos == 0 || nums[pos - 1] != nums[pos] || visited[pos - 1]) {  //按条件选
            list.push_back(nums[pos]);
            visited[pos] = 1;
            dfs(nums, pos + 1, list, result, visited);
            //回退
            visited[pos] = 0;
            list.pop_back();
        }
        //不选
        dfs(nums, pos + 1, list, result, visited);
    }
 
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());  //先排序，保证相同的数字是连着的
        vector<vector<int>> result;
        vector<int> list;
        vector<int> visited(nums.size(), 0);  //是否访问过
        dfs(nums, 0, list, result, visited);
        return result;

2、
class Solution {
public:
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        vector<vector<int> > res;
        vector<int> out;
        sort(S.begin(), S.end());
        getSubsets(S, 0, out, res);
        return res;
    }
    void getSubsets(vector<int> &S, int pos, vector<int> &out, vector<vector<int> > &res) {
        res.push_back(out);
        for (int i = pos; i < S.size(); ++i) {
            if(i>pos && S[i] == S[i-1]) continue;
            out.push_back(S[i]);
            getSubsets(S, i + 1, out, res);
            out.pop_back();
        }
    }
};
c++:
https://www.cnblogs.com/grandyang/p/4310964.html
1、
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int> &S) {
        if (S.empty()) return {};
        vector<vector<int>> res(1);
        sort(S.begin(), S.end());
        int size = 1, last = S[0];
        for (int i = 0; i < S.size(); ++i) {
            if (last != S[i]) {
                last = S[i];
                size = res.size();
            }
            int newSize = res.size();
            for (int j = newSize - size; j < newSize; ++j) {
                res.push_back(res[j]);
                res.back().push_back(S[i]);
            }
        }
        return res;
    }
};
2、
class Solution {
public:
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        vector<vector<int> > res;
        vector<int> out;
        sort(S.begin(), S.end());
        getSubsets(S, 0, out, res);
        return res;
    }
    void getSubsets(vector<int> &S, int pos, vector<int> &out, vector<vector<int> > &res) {
        res.push_back(out);
        for (int i = pos; i < S.size(); ++i) {
            if(i>pos && S[i] == S[i-1]) continue;
            out.push_back(S[i]);
            getSubsets(S, i + 1, out, res);
            out.pop_back();
        }
    }
};
