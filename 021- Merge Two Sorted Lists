C:
1、
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode*l,*head;
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;
    if(l1->val <= l2->val)
    {
        l = l1;
        l1 = l1->next;
    }
    else
    {
        l = l2;
        l2 = l2->next;
    }
    head = l;
    while(l1 && l2)
    {
        if(l1->val <= l2->val)
        {
            l->next = l1;
            l = l1;
            l1 = l1->next;
        }
        else
        {   
            l->next = l2;
            l = l2;
            l2 = l2->next;
        }    
    }
    if(l1 == NULL)
        l->next = l2;
    else
        l->next = l1;
    return head;
}
2、
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    if (l1 == NULL) {
        return l2;
    }else if (l2 == NULL){
        return l1;
    }else if (l1->val < l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

python:
1、
def mergeTwoLists(self, a, b):
    if not a or b and a.val > b.val:
        a, b = b, a
    if a:
        a.next = self.mergeTwoLists(a.next, b)
    return a
    
2、
def mergeTwoLists1(self, l1, l2):
    dummy = cur = ListNode(0)
    while l1 and l2:
        if l1.val < l2.val:
            cur.next = l1
            l1 = l1.next
        else:
            cur.next = l2
            l2 = l2.next
        cur = cur.next
    cur.next = l1 or l2
    return dummy.next
