1、c
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
  
        if (nums1Size > nums2Size) { // to ensure nums1Size<=nums2Size
           int*temp;
            temp=nums1;
            nums1=nums2;
            nums2=temp;
            int tem;
            tem=nums1Size;
            nums1Size=nums2Size;
            nums2Size=tem;
               
        }
        int iMin = 0, iMax = nums1Size, halfLen = (nums1Size + nums2Size + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && nums2[j-1] > nums1[i]){
                iMin = i + 1; // i is too small
            }
            else if (i > iMin && nums1[i-1] > nums2[j]) {
                iMax = i - 1; // i is too big
            }
            else { // i is perfect
                int maxLeft = 0;
                if (i == 0) 
                { 
                    maxLeft = nums2[j-1];
                }
                else if (j == 0) 
                { 
                    maxLeft = nums1[i-1]; 
                }
                else 
                { 
                    maxLeft = nums1[i-1]>nums2[j-1]?nums1[i-1]:nums2[j-1]; 
                }
                if ( (nums1Size + nums2Size) % 2 == 1 ) 
                { 
                    return maxLeft; 
                }

                int minRight = 0;
                if (i == nums1Size) 
                { 
                    minRight = nums2[j]; 
                }
                else if (j == nums2Size)
                { 
                    minRight = nums1[i];
                }
                else 
                { 
                    minRight = nums2[j]<nums1[i]?nums2[j]:nums1[i]; 
                }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;
 }



2、Python
def median(A, B):
    m, n = len(A), len(B)
    if m > n:
        A, B, m, n = B, A, n, m
    if n == 0:
        raise ValueError

    imin, imax, half_len = 0, m, (m + n + 1) / 2
    while imin <= imax:
        i = (imin + imax) / 2
        j = half_len - i
        if i < m and B[j-1] > A[i]:
            # i is too small, must increase it
            imin = i + 1
        elif i > 0 and A[i-1] > B[j]:
            # i is too big, must decrease it
            imax = i - 1
        else:
            # i is perfect

            if i == 0: max_of_left = B[j-1]
            elif j == 0: max_of_left = A[i-1]
            else: max_of_left = max(A[i-1], B[j-1])

            if (m + n) % 2 == 1:
                return max_of_left

            if i == m: min_of_right = B[j]
            elif j == n: min_of_right = A[i]
            else: min_of_right = min(A[i], B[j])

            return (max_of_left + min_of_right) / 2.0

